1.Create main layout
2.定义class Basic 和 Education
3.定义工具类 DateUtils
4.动态列表，利用getLayoutInflater.inflate
5.getLayoutInflater().inflate() 相当于LayoutInflater.from(this).infate();
6.。。。写一个抽象类EditBase，里面完成menu功能，调用自己的抽象方法。
7.以上已经完成添加修改，下面开始完成修改头像
8.修改Basic类，添加变量Uri:  新知识点： classloader
我们看到了系统的3个类加载器，但我们可能不知道具体哪个先行呢？ 
我可以先告诉你答案 
1. Bootstrap CLassloder 
2. Extention ClassLoader 
3. AppClassLoader
用序列描述一下： 
1. 一个AppClassLoader查找资源时，先看看缓存是否有，缓存有从缓存中获取，否则委托给父加载器。 
2. 递归，重复第1部的操作。 
3. 如果ExtClassLoader也没有加载过，则由Bootstrap ClassLoader出面，它首先查找缓存，如果没有找到的话，就去找自己的规定的路径下，也就是sun.mic.boot.class下面的路径。找到就返回，没有找到，让子加载器自己去找。 
4. Bootstrap ClassLoader如果没有查找成功，则ExtClassLoader自己在java.ext.dirs路径中去查找，查找成功就返回，查找不成功，再向下让子加载器找。 
5. ExtClassLoader查找不成功，AppClassLoader就自己查找，在java.class.path路径下查找。找到就返回。如果没有找到就让子类找，如果没有子类会怎么样？抛出各种异常。

上面的序列，详细说明了双亲委托的加载流程。我们可以发现委托是从下向上，然后具体查找过程却是自上至下。
自定义ClassLoader

不知道大家有没有发现，不管是Bootstrap ClassLoader还是ExtClassLoader等，这些类加载器都只是加载指定的目录下的jar包或者资源。如果在某种情况下，我们需要动态加载一些东西呢？比如从D盘某个文件夹加载一个class文件，或者从网络上下载class主内容然后再进行加载，这样可以吗？

如果要这样做的话，需要我们自定义一个classloader。
1。编写一个类继承自ClassLoader抽象类。
2.复写它的findClass()方法。
3.在findClass()方法中调用defineClass()。

Uri:[scheme:][//host:port][path][?query][#fragment]  
contentProvider:  
外界的程序通过ContentResolver接口可以访问ContentProvider提供的数据，在Activity当中通过getContentResolver()可以得到当前应用的 ContentResolver实例

View.setTag()可以用来传递某些数据！！！！贼牛逼！
点击图片读取图片需要permission：
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    Build.VERSION.SDK_INT < Build.VERSION_CODES.M
                || ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;
    Android M对permission有新权限要求， Build.VERSION.SDK_INT 是获取当前手机版本
                                      Build.VERSION_CODES.M  Android M
                                      
       If the package has the permission, PERMISSION_GRANTED is returned. If it does not have the permission, PERMISSION_DENIED is returned.
Value is PERMISSION_GRANTED or PERMISSION_DENIED.

1.检查权限状态

如果执行的操作需要一个dangerous permission, 那么每次在执行操作的地方都必须check你是否有这个permission, 因为用户可以在应用设置里随意地更改授权情况, 所以必须每次在使用前都检查是否有权限.
 
检查权限的方法: ContextCompat.checkSelfPermission()两个参数分别是Context和权限名.
返回值是:PERMISSION_GRANTED if you have the permission, or PERMISSION_DENIED if not.
 
比如:
复制代码
if (PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_CONTACTS)) {
    //has permission, do operation directly
    ContactsUtils.readPhoneContacts(this);
    Log.i(DEBUG_TAG, "user has the permission already!");
} else {
    //do not have permission
    
   If has permission 读取图片使用Intent.ACTION_PICK
private void pickImage() {
        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(Intent.createChooser(intent, "Select picture"),
                               REQ_CODE_PICK_IMAGE);
    }
    总结：
    读取图片：
    1.权限设置好在MainFes里面  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    2.点击图标，OnClickListener里面先判断权限
     public void onClick(View v) {
                if (!PermissionUtils.checkPermission(InfoEditActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE)) {
                    PermissionUtils.requestReadExternalStoragePermission(InfoEditActivity.this);
                }//dont have permission, get it.
                else {
                    pickImage();
                }
            }
            
      3.有权限则pickImage
      利用Intent跳转到图库 
      Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(Intent.createChooser(intent,"select picture"),REQ_CODE_PICK_IMAGE);
        
    4.重写OnActivityResult，利用getData（） 获得得到的Uri
     protected void onActivityResult(int requestCode, int resultCode, Intent data){
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQ_CODE_PICK_IMAGE && resultCode == RESULT_OK) {
            Uri imageUri = data.getData();
            if(imageUri!= null) {
                showImage(imageUri);
            }
        }
    }
    5.如果Uri有值，则显示图片在修改界面：
    将URi放进ImageView的tag里方便传递
    
     private void showImage(Uri imageUri) {
        ImageView imageView = (ImageView) findViewById(R.id.basic_info_edit_image);
        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);

        imageView.setTag(imageUri);
        ImageUtils.loadImage(this,imageUri,imageView);
    }

    6.最后调用loadImage
    通过固定方式，getContentReslover() 和 uri 创建bitmap， ImageView 再设置Bitmap就相当于显示图片了
    public static void loadImage(Context context, Uri uri, ImageView imageView) {
        try {
            Bitmap bitmap = MediaStore.Images.Media.getBitmap(context.getContentResolver(), uri);
            imageView.setImageBitmap(bitmap);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
      7，点击菜单的对勾，调用自身saveandExit方法
      将name email imageuri 通过intent传递出去
      在主界面重写的OnActivityResult（） 里面获得basicInfo对象并调用setupBasicUI()
      8.    setupBasicUI()里面调用了 之前loadImage方法 显示图片
      、、、、、、、、、、、、、、、、、、、、、、、
      给一个ImageView set BitMap 就能显示图片

数据持久化：
利用Gson类,
